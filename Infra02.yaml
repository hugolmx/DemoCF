Parameters:

  KeyName1:
    Description: Key Pair for EC2
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: id_rsa
################################################################
#################### VPC #######################################
################################################################
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: Vpc-CloudFormation
################################################################
#################### Internet Gateway ##########################
################################################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: VPC Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
################################################################
#################### Subnets ###################################
################################################################
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 3

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 4
################################################################
#################### Route Table ###############################
################################################################
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Route Table 1

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Route Table 2

  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable2

  PrivateSubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet4
      RouteTableId: !Ref PrivateRouteTable2
################################################################
#################### Nat Gateway ###############################
################################################################
  ElasticIP1:
    Type: AWS::EC2::EIP
    #Condition: EnabledNatGateway
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    #Condition: EnabledNatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  RouteNatGateway:
    Type: AWS::EC2::Route
    DependsOn: [ NatGateway ]
    #Condition: EnabledNatGateway
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable1

  ElasticIP2:
    Type: AWS::EC2::EIP
    #Condition: EnabledNatGateway
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    #Condition: EnabledNatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  RouteNatGateway2:
    Type: AWS::EC2::Route
    DependsOn: [ NatGateway ]
    #Condition: EnabledNatGateway
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway2
      RouteTableId: !Ref PrivateRouteTable2   
################################################################
################################################################
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: "rds-subnet-group"
      DBSubnetGroupDescription: "rds-subnet-group"
      SubnetIds:
        - !Ref PrivateSubnet3
        - !Ref PrivateSubnet4
  ##############################################################
  ################### RDS Proxy ################################
  ##############################################################
  RDSProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security Group for RDS Proxy"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SecurityGroup rds-grp"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref RDSProxySecurityGroup
          FromPort: 3306
          ToPort: 3306
#############################################################
##################  RDS Instance ############################
#############################################################
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: wordpress
      Engine: mysql
      EngineVersion: 5.7
      DBInstanceClass: db.t3.medium
      AllocatedStorage: 20
      MultiAZ: true
      StorageType: gp2
      MasterUsername: wordpress
      MasterUserPassword: wordpress
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
#############################################################
##################  EC2 Instances ###########################
#############################################################
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-052efd3df9dad4825
      InstanceType: t3.medium
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PrivateSubnet2
      KeyName: !Ref KeyName1
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install stress nfs-common apache2 mysql-server php perl php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip libapache2-mod-php php-mysql -y
          wget https://wordpress.org/latest.tar.gz
          tar -xvzf latest.tar.gz
          wget https://raw.githubusercontent.com/ACloudGuru-Resources/course-aws-certified-solutions-architect-associate/main/lab/5/000-default.conf
          cp wordpress/wp-config-sample.php wordpress/wp-config.php
          sudo sed -i "s/.*DB_NAME.*/define( 'DB_NAME', 'wordpress');/g" wordpress/wp-config.php
          sudo sed -i "s/.*DB_USER.*/define( 'DB_USER', 'wordpress');/g" wordpress/wp-config.php
          sudo sed -i "s/.*DB_PASSWORD.*/define( 'DB_PASSWORD', 'wordpress');/g" wordpress/wp-config.php
          sudo sed -i "s/.*DB_HOST.*/define( 'DB_HOST', '${RDSInstance.Endpoint.Address}');/g" wordpress/wp-config.php
          mkdir wp-content/uploads
          chmod 775 wp-content/uploads
          mv 000-default.conf /etc/apache2/sites-enabled/
          mkdir /var/www/wordpress
          sudo mount -t nfs4 -o nfsvers=4.1,rsize=8192,wsize=8192,hard,timeo=14,retrans=2,noresvport ${FileSystemResource}.efs.${AWS::Region}.amazonaws.com:/ /var/www/wordpress
          sudo echo "${FileSystemResource}.efs.${AWS::Region}.amazonaws.com:/ /var/www/wordpress nfs4 rw,hard,intr,rsize=8192,wsize=8192,timeo=14 0 0" >> /etc/fstab
          cp -r wordpress /var/www
          apache2ctl restart
          sudo shutdown -h now
      Tags: 
      - Key: Name
        Value: WebServer01
      
  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-052efd3df9dad4825
      InstanceType: t3.medium
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyName1
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
      Tags: 
      - Key: Name
        Value: Bastion
#############################################################
##################  Security Groups #########################
#############################################################
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2-SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ELBSecurityGroup
          - GroupId
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
  
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        CidrIp: 0.0.0.0/0

#############################################################
### Target Group, Listener and Application  Load Balancer ###
#############################################################
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckProtocol: HTTP
      HealthCheckPath: /wp-login.php
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200,301,302'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref EC2Instance1
        Port: 80
      VpcId: !Ref VPC

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ELBSecurityGroup.GroupId
#############################################################
########################## EFS ##############################
#############################################################
    DependsOn: [PrivateSubnet1, PrivateSubnet2]
  FileSystemResource:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      BackupPolicy:
        Status: ENABLED
      PerformanceMode: maxIO
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: WpFileSystem
     
    DependsOn: [EC2SecurityGroup, PrivateSubnet1]
  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
       - Ref: "EFSSecurityGroup"
  
    DependsOn: [EC2SecurityGroup, PrivateSubnet2]
  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
       - Ref: "EFSSecurityGroup"
 
  AccessPointResource:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref FileSystemResource
      RootDirectory:
        Path: "/var/www/wordpress"
#############################################################
################### Auto Scaling #############################
#############################################################
  ASGLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: ami-03fb94bf657ad798a                                      ######## EDIT ONCE GOLD IMAGE IS CREATED ######
        InstanceType: t3.medium
        SecurityGroupIds:
        - !Ref EC2SecurityGroup
        KeyName: !Ref KeyName1

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Select [ 0, !GetAZs '' ]
        - !Select [ 1, !GetAZs '' ]
      Cooldown: 60
      DesiredCapacityType: units
      HealthCheckGracePeriod: 30
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref ASGLaunchTemplate
        Version: !GetAtt ASGLaunchTemplate.LatestVersionNumber
      MaxSize: '4'
      MinSize: '3'
      DesiredCapacity: '3'
      NewInstancesProtectedFromScaleIn: false
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      TerminationPolicies:
        - NewestInstance
        - Default
      VPCZoneIdentifier:   
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      MetricsCollection: 
        - Granularity: 1Minute
          Metrics: 
            - GroupMinSize
            - GroupMaxSize
      Tags:
        - Key: Name
          Value: WPServer
          PropagateAtLaunch: true
        - Key: Purpose
          Value: WordpressGroup
          PropagateAtLaunch: false
#############################################################
############ Auto Scaling Policy and Alarms #################
#############################################################
  ASGScalingPolicyHigh: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AutoScalingGroupName: !Ref MyASG
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '1'

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Scale_Out
      AlarmDescription: CPU > 70%, create additional EC2 instance.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !Ref ASGScalingPolicyHigh
      InsufficientDataActions: []
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyASG
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold

  ASGScalingPolicyLow: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AutoScalingGroupName: !Ref MyASG
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '-1'
  
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Scale_In
      AlarmDescription: CPU < 30%, remove any additional EC2 instance.
      ActionsEnabled: true
      OKActions: []
      AlarmActions:
        - !Ref ASGScalingPolicyLow
      InsufficientDataActions: []
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyASG
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 30
      ComparisonOperator: LessThanThreshold

Outputs: 
   GoldInstanceID:
    Description: Gold Instance ID
    Value: !Ref EC2Instance1
   PrivatSubnet1:
    Description: Private-Subnet-1
    Value: !Ref PrivateSubnet1
   PrivatSubnet2:
    Description: Private-Subnet-2
    Value: !Ref PrivateSubnet2
   DBEndpointID:
    Description: DB Endpoint 
    Value: !GetAtt RDSInstance.Endpoint.Address
   ALB:
    Description: ALB
    Value: !GetAtt ApplicationLoadBalancer.DNSName
